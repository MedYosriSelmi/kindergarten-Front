using kindergarten_Front.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Web;
using System.Web.Mvc;

namespace kindergarten_Front.Controllers
{
    public class ReclamationController : Controller
    {
        // GET: Reclamation
        public ActionResult Index()
        {
            IEnumerable<Reclamation> reclamation = null;
            using (var reclam = new HttpClient())
            {
                reclam.BaseAddress = new Uri("http://localhost:8081");
                var responseTask = reclam.GetAsync("/SpringMVC/servlet/getAllReclamations");
                responseTask.Wait();
                var result = responseTask.Result;
                if (result.IsSuccessStatusCode)
                {
                    var readJob = result.Content.ReadAsAsync<IList<Reclamation>>();
                    readJob.Wait();
                    reclamation = readJob.Result;
                }
                else
                {
                    //return the error
                    reclamation = Enumerable.Empty<Reclamation>();
                    ModelState.AddModelError(String.Empty, "error");
                }

            }
            return View(reclamation);
        }

        public ActionResult getReclamationsById()
        {
            IEnumerable<Reclamation> reclamation = null;
            using (var reclam = new HttpClient())
            {
                reclam.BaseAddress = new Uri("http://localhost:8081");
                var responseTask = reclam.GetAsync("/SpringMVC/servlet/getAllReclamationsByUserId/2");
                responseTask.Wait();
                var result = responseTask.Result;
                if (result.IsSuccessStatusCode)
                {
                    var readJob = result.Content.ReadAsAsync<IList<Reclamation>>();
                    readJob.Wait();
                    reclamation = readJob.Result;
                }
                else
                {
                    //return the error
                    reclamation = Enumerable.Empty<Reclamation>();
                    ModelState.AddModelError(String.Empty, "error");
                }

            }
            return View(reclamation);
        }

        public ActionResult Delete(int id)
        {
            using (var client = new HttpClient())
            {
                client.BaseAddress = new Uri("http://localhost:8081");

                //HTTP 
                var deleteTask = client.DeleteAsync("/SpringMVC/servlet/deleteReclamation/2/" + id.ToString());
                deleteTask.Wait();

                var result = deleteTask.Result;
                if (result.IsSuccessStatusCode)
                {
                    return RedirectToAction("getReclamationsById");
                }
                return RedirectToAction("getReclamationsById");
            }
        }

        [HttpPost]
        public ActionResult createview()
        {
            return View();
        }

            [HttpPost]
            public ActionResult addTechnicalReclamation(Reclamation rec)
            {
                using (var client = new HttpClient())
                {
                    client.BaseAddress = new Uri("http://localhost:8081");
                    var postJob = client.PostAsJsonAsync<Reclamation>("/SpringMVC/servlet/addTechReclamation/2/", rec);
                    postJob.Wait();
                    var postResult = postJob.Result;
                    DateTime dateCreation = DateTime.Now;
                if (postResult.IsSuccessStatusCode)
                    return RedirectToAction("Index");
                }
                return View(rec);
            }
        }
    }
